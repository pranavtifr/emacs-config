* I3 Settings
** Pop up frames
#+BEGIN_SRC emacs-lisp
(setq pop-up-frames t)
#+END_SRC
* Python Mode
** Enable Elpy
#+BEGIN_SRC emacs-lisp
(require 'elpy)
(elpy-enable)
;keep the backend as jedi
(setq elpy-rpc-backend "jedi")  
;(with-eval-after-load 'python
  ;(defun python-shell-completion-native-try ()
    ;"Return non-nil if can trigger native completion."
    ;(let ((python-shell-completion-native-enable t)
          ;(python-shell-completion-native-output-timeout
           ;python-shell-completion-native-try-output-timeout))
      ;(python-shell-completion-native-get-completions
       ;(get-buffer-process (current-buffer))
       ;nil "_"))))
(setq python-shell-completion-native-enable nil)
#+END_SRC
* Evil Mode
** Evil Mode Settings
The only reason I even began to consider using emacs was this super awesome mode.
#+BEGIN_SRC emacs-lisp
; Use evil mode
(require 'evil)
(evil-mode t)
#+END_SRC
** Relative Numbers
If I'm using EVIL. Why not make the best setting on VIM work
#+BEGIN_SRC emacs-lisp
;Relative Numbers
(add-hook 'find-file-hook
     (lambda ()
     (linum-mode)
      (linum-relative-global-mode t)
      (set-cursor-color "#ffffff")
        ))
(setq linum-relative-current-symbol "")
#+END_SRC
** Hard Mode Practice
   Disabling arrow keys for myself. I want to practice the vim keybindings.
  #+BEGIN_SRC emacs-lisp
  (define-minor-mode hard-mode
  "Overrides all major and minor mode keys" t)

    (defvar hard-mode-map (make-sparse-keymap "hard-mode-map")
    "Override all major and minor mode keys")

    (add-to-list 'emulation-mode-map-alists
    `((hard-mode . ,hard-mode-map)))

    (define-key hard-mode-map (kbd "<left>")
        (lambda ()
        (interactive)
        (message "Use Vim keys: h for Left")))

    (define-key hard-mode-map (kbd "<right>")
        (lambda ()
        (interactive)
        (message "Use Vim keys: l for Right")))

    (define-key hard-mode-map (kbd "<up>")
        (lambda ()
        (interactive)
        (message "Use Vim keys: k for Up")))

    (define-key hard-mode-map (kbd "<down>")
        (lambda ()
        (interactive)
        (message "Use Vim keys: j for Down")))
	
    (evil-make-intercept-map hard-mode-map)
  #+END_SRC
 
* Word Count Mode
#+BEGIN_SRC emacs-lisp
; Use word count mode
 (load "wc-mode")
 (wc-mode t)
#+END_SRC
* UI Choices
#+BEGIN_SRC emacs-lisp
;UI Choices
(require 'powerline)
(powerline-center-evil-theme)
(setq visible-bell 1)
(setq-default indent-tabs-mode nil)
(setq scroll-conservatively 100)
(setq-default tab-width 2)

;Horizontal splits for temporary buffers
(defun split-horizontally-for-temp-buffers ()
   (when (one-window-p t)
     (split-window-horizontally)))

(add-hook 'temp-buffer-window-setup-hook
            'split-horizontally-for-temp-buffers)
            
;Window Size
(if (window-system)
  (set-frame-size (selected-frame) 500 500))
  
(setq split-width-threshold 0)
(setq split-height-threshold nil)
;(require 'highlight-paranthesis)
;(add-hook emacs-startup-hook 'highlight-paranthesis-mode)
;(highlight-leading-spaces-mode)
#+END_SRC
* Auto Complete
#+BEGIN_SRC emacs-lisp
(require 'auto-complete)
(require 'auto-complete-config)
(ac-config-default)
;((add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(global-auto-complete-mode 1)
(setq-default ac-sources '(ac-source-yasnippet
                           ac-source-abbrev
                           ac-source-dictionary
                            ac-source-words-in-same-mode-buffers))
(ac-set-trigger-key "TAB")
(ac-set-trigger-key "<tab>")
(setq ac-auto-show-menu t)
(setq ac-use-fuzzy t)
(setq ac-show-menu-immediately-on-auto-complete t)
(setq ac-auto-start 2)
#+END_SRC
* Engine Mode

#+BEGIN_SRC emacs-lisp
;Engine Mode
(require 'engine-mode) 

(defengine duckduckgo
  "https://duckduckgo.com/?q=%s"
:keybinding "d")

(defengine github
  "https://github.com/search?ref=simplesearch&q=%s"
:keybinding "g")

(defengine google
"http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s")

(engine-mode t)
#+END_SRC
* Python Stuff

** Shorter commands for evil
  #+BEGIN_SRC emacs-lisp
;(define-key evil-ex-completion-map "err" 'flymake-goto-next-error)
(defun err () 
  (interactive)
  (flymake-goto-next-error))

(defun gd () 
  (interactive)
  (elpy-goto-definition))

(defun doc () 
  (interactive)
  (elpy-doc))
  #+END_SRC
** Certain Important Hooks
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'hs-minor-mode)
(add-hook 'python-mode-hook 'electric-pair-mode)
;(add-hook 'python-mode-hook
;          (lambda ()
;            (define-key python-mode-map "\"" 'electric-pair)
;            (define-key python-mode-map "\'" 'electric-pair)
;            (define-key python-mode-map "(" 'electric-pair)
;            (define-key python-mode-map "[" 'electric-pair)
;            (define-key python-mode-map "{" 'electric-pair)))
#+END_SRC
** Folding the code
#+BEGIN_SRC emacs-lisp
(defun hide () 
  (interactive)
  (hs-hide-block))
(defun hideall () 
  (interactive)
  (hs-hide-all))
(defun see () 
  (interactive)
  (hs-show-block))
(defun seeall () 
  (interactive)
  (hs-show-all))
#+END_SRC
** Indendation =4

#+BEGIN_SRC emacs-lisp
(setq python-indent-offset 4)
#+END_SRC
* Create and customize hooks for programming
** highlight paranthesis
** Highlight leading spaces
