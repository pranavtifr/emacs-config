TODO:
    - Refactor Code using =use-package=
    - Try to have all installations from MELPA instead of AUR
    - Auto Update ?
    - Ledger Mode Hooks
    - Cleanup on save
    - Flycheck ?
    
FONT TEST:
    normal
    =emph=
    *bold*
    /italics/
    _uline_
    +strike+

* Magit and hl-diff
#+BEGIN_SRC emacs-lisp
(require 'magit)
(require 'evil-magit)
(require 'diff-hl)
(add-hook 'python-mode-hook 'diff-hl-mode)
(add-hook 'org-mode-hook 'diff-hl-mode)
(add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
(setq git-commit-summary-max-length 50)
#+END_SRC
* Evil Mode
** Evil Mode Settings
The only reason I even began to consider using emacs was this super awesome mode.
#+BEGIN_SRC emacs-lisp
; Use evil mode
(require 'evil)
(evil-mode t)
(require 'evil-quickscope)
(global-evil-quickscope-mode 1)
#+END_SRC
** Relative Numbers
If I'm using EVIL. Why not make the best setting on VIM work
#+BEGIN_SRC emacs-lisp
;Relative Numbers
(add-hook 'find-file-hook
    (lambda ()
    (linum-mode)
    (linum-relative-global-mode t)
    (set-cursor-color "#ffffff")
    ))
(setq linum-relative-current-symbol "")
#+END_SRC
** Hard Mode Practice
    Disabling arrow keys for myself. I want to practice the vim keybindings.
    #+BEGIN_SRC emacs-lisp
    (define-minor-mode hard-mode
    "Overrides all major and minor mode keys" t)

    (defvar hard-mode-map (make-sparse-keymap "hard-mode-map")
    "Override all major and minor mode keys")

    (add-to-list 'emulation-mode-map-alists
    `((hard-mode . ,hard-mode-map)))

    (define-key hard-mode-map (kbd "<left>")
    (lambda ()
    (interactive)
    (message "Use Vim keys: h for Left")))

    (define-key hard-mode-map (kbd "<right>")
    (lambda ()
    (interactive)
    (message "Use Vim keys: l for Right")))

    (define-key hard-mode-map (kbd "<up>")
    (lambda ()
    (interactive)
    (message "Use Vim keys: k for Up")))

    (define-key hard-mode-map (kbd "<down>")
    (lambda ()
    (interactive)
    (message "Use Vim keys: j for Down")))
    
    (evil-make-intercept-map hard-mode-map)
    #+END_SRC
    
** Some Vim Functions
    #+BEGIN_SRC emacs-lisp
(defun n () 
    (interactive)
    (centaur-tabs-forward))

(defun N () 
    (interactive)
    (centaur-tabs-backward))

#+END_SRC
* Python Mode
** Enable Elpy
#+BEGIN_SRC emacs-lisp
(require 'elpy)
(elpy-enable)
;keep the backend as jedi
(setq elpy-rpc-backend "jedi")  
; Set PATH
(setq elpy-rpc-python-command "/usr/bin/python")
;(with-eval-after-load 'python
    ;(defun python-shell-completion-native-try ()
    ;"Return non-nil if can trigger native completion."
    ;(let ((python-shell-completion-native-enable t)
    ;(python-shell-completion-native-output-timeout
    ;python-shell-completion-native-try-output-timeout))
    ;(python-shell-completion-native-get-completions
    ;(get-buffer-process (current-buffer))
    ;nil "_"))))
(setq python-shell-completion-native-enable nil)
#+END_SRC
** Run black before saving
#+BEGIN_SRC emacs-lisp
(add-hook 'elpy-mode-hook
    '(lambda ()
    (when (eq major-mode 'python-mode)
    (add-hook 'before-save-hook 'elpy-black-fix-code)))
)
#+END_SRC
** Certain Important Hooks
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'hs-minor-mode)
(add-hook 'python-mode-hook 'electric-pair-mode)
(add-hook 'python-mode-hook 'turn-on-evil-quickscope-always-mode)
;(add-hook 'python-mode-hook
;          (lambda ()
;            (define-key python-mode-map "\"" 'electric-pair)
;            (define-key python-mode-map "\'" 'electric-pair)
;            (define-key python-mode-map "(" 'electric-pair)
;            (define-key python-mode-map "[" 'electric-pair)
;            (define-key python-mode-map "{" 'electric-pair)))
#+END_SRC
* My Tmux functionality here too
    #+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c |") 'split-window-right)
(global-set-key (kbd "C-c -") 'split-window-below)
#+END_SRC
* Word Count Mode
#+BEGIN_SRC emacs-lisp
; Use word count mode
    (load "wc-mode")
    (wc-mode t)
#+END_SRC
* UI Choices
** I3 Settings
    Not using for Now
*** Pop up frames
#+BEGIN_SRC emacs-lisp
;(setq pop-up-frames t)
#+END_SRC

** Title Bar
#+BEGIN_SRC emacs-lisp
(setq frame-title-format "%b")
#+END_SRC
** Window Divider Mode
#+BEGIN_SRC emacs-lisp
(window-divider-mode)
#+END_SRC
** Mouse Avoidance Mode
#+BEGIN_SRC emacs-lisp
(mouse-avoidance-mode 'animate)
#+END_SRC
** Highlight the Current Line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode)
#+END_SRC
** Powerline
#+BEGIN_SRC emacs-lisp
;UI Choices
(require 'powerline)
(powerline-center-evil-theme)
#+END_SRC
** Visible Bell
#+BEGIN_SRC emacs-lisp
(setq visible-bell 1)
#+END_SRC
** Make Tabs into spaces
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC
** Scroll Conservatively
When point goes outside the window, Emacs usually recenters the buffer point.
    Iâ€™m not crazy about that. This changes scrolling behavior to only scroll as far as point goes.
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
#+END_SRC
** Tab Width
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 2)
#+END_SRC
** Buffer Splitting
#+BEGIN_SRC emacs-lisp
;Horizontal splits for temporary buffers
(defun split-horizontally-for-temp-buffers ()
    (when (one-window-p t)
    (split-window-horizontally)))

(add-hook 'temp-buffer-window-setup-hook
    'split-horizontally-for-temp-buffers)
    
#+END_SRC
** Window Size
#+BEGIN_SRC emacs-lisp
;Window Size
(if (window-system)
    (set-frame-size (selected-frame) 500 500))
    
(setq split-width-threshold 0)
(setq split-height-threshold nil)

#+END_SRC
#+BEGIN_SRC emacs-lisp
;Mini Buffer completion
(icomplete-mode 1)
#+END_SRC
** DOOM THEME
#+BEGIN_SRC emacs-lisp
(require 'doom-themes)
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
    doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    ;(doom-themes-neotree-config)
    ;; or for treemacs users
    ;(setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    ;(doom-themes-treemacs-config)
    
    ;; Corrects (and improves) org-mode's native fontification.
(doom-themes-org-config)
#+END_SRC
** Centaur Tabs
#+BEGIN_SRC emacs-lisp
(require 'centaur-tabs)
(centaur-tabs-mode t)
(global-set-key (kbd "C-<prior>")  'centaur-tabs-backward)
(global-set-key (kbd "C-<next>") 'centaur-tabs-forward)

(defun n () 
    (interactive)
    (centaur-tabs-forward))

(defun N () 
    (interactive)
    (centaur-tabs-backward))

(centaur-tabs-headline-match)
(setq centaur-tabs-style "bar")
(defun centaur-tabs-buffer-groups ()
    "`centaur-tabs-buffer-groups' control buffers' group rules.

    Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
    All buffer name start with * will group to \"Emacs\".
    Other buffer group by `centaur-tabs-get-group-name' with project name."
    (list
    (cond
    ;; ((not (eq (file-remote-p (buffer-file-name)) nil))
    ;; "Remote")
    ((or (string-equal "*" (substring (buffer-name) 0 1))
    (memq major-mode '(magit-process-mode
    magit-status-mode
    magit-diff-mode
    magit-log-mode
    magit-file-mode
    magit-blob-mode
    magit-blame-mode
    )))
    "Emacs")
    ((memq major-mode '(org-mode
    python-mode
    latex-mode
    fundamental-mode
    sh-mode
    org-agenda-clockreport-mode
    org-src-mode
    org-agenda-mode
    org-beamer-mode
    org-indent-mode
    org-bullets-mode
    org-cdlatex-mode
    org-agenda-log-mode
    diary-mode
    ))
    "Work")
    (t
    (centaur-tabs-get-group-name (current-buffer))))))
#+END_SRC
* Auto Complete
#+BEGIN_SRC emacs-lisp
(require 'auto-complete)
(require 'auto-complete-config)
(ac-config-default)
;((add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(global-auto-complete-mode 1)
(setq-default ac-sources '(ac-source-yasnippet
    ac-source-abbrev
    ac-source-dictionary
    ac-source-words-in-same-mode-buffers))
(ac-set-trigger-key "TAB")
(ac-set-trigger-key "<tab>")
(setq ac-auto-show-menu t)
(setq ac-use-fuzzy t)
(setq ac-show-menu-immediately-on-auto-complete t)
(setq ac-auto-start 2)
#+END_SRC
* Engine Mode
To search for selected text from emacs
#+BEGIN_SRC emacs-lisp
;Engine Mode
(require 'engine-mode) 

(defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
:keybinding "d")

(engine-mode t)
(defalias 'duck 'engine/search-duckduckgo)
#+END_SRC
* Python Stuff
** Shorter commands for evil
    #+BEGIN_SRC emacs-lisp
;(define-key evil-ex-completion-map "err" 'flymake-goto-next-error)
(defun err () 
    (interactive)
    (flymake-goto-next-error))

(defun gd () 
    (interactive)
    (elpy-goto-definition))

(defun doc () 
    (interactive)
    (elpy-doc))
    #+END_SRC
** Folding the code
#+BEGIN_SRC emacs-lisp
(defun hide () 
    (interactive)
    (hs-hide-block))
(defun hideall () 
    (interactive)
    (hs-hide-all))
(defun see () 
    (interactive)
    (hs-show-block))
(defun seeall () 
    (interactive)
    (hs-show-all))
#+END_SRC
** Indendation =4

#+BEGIN_SRC emacs-lisp
(setq python-indent-offset 4)
#+END_SRC
* Create and customize hooks for programming
** highlight paranthesis
#+BEGIN_SRC emacs-lisp
;(require 'highlight-paranthesis)
;(add-hook emacs-startup-hook 'highlight-paranthesis-mode)
;(highlight-leading-spaces-mode)
#+END_SRC
** Highlight leading spaces
#+BEGIN_SRC emacs-lisp
;(highlight-leading-spaces-mode)
#+END_SRC
* Wind Move
Move like the Wind, Shadow fax
#+BEGIN_SRC emacs-lisp
(require 'windmove)
(global-set-key (kbd "C-c h")  'windmove-left)
(global-set-key (kbd "C-c l") 'windmove-right)
(global-set-key (kbd "C-c k>")    'windmove-up)
(global-set-key (kbd "C-c j")  'windmove-down)
#+END_SRC
* Kill Buffer Function
#+BEGIN_SRC emacs-lisp
(defun qq () 
    (interactive)
    (kill-current-buffer))
#+END_SRC

* Evil - Org
#+BEGIN_SRC emacs-lisp
(require 'evil-org)
(add-hook 'org-mode-hook 'evil-org-mode)
(evil-org-set-key-theme '(navigation insert textobjects additional calendar))
(require 'evil-org-agenda)
(evil-org-agenda-set-keys)
#+END_SRC
* Org-Mode 
#+BEGIN_SRC emacs-lisp

;For Org
(require 'org-bullets)
;;For Bullets
(add-hook 'org-mode-hook
    (lambda ()
    (org-bullets-mode t)))
;(setq org-ellipsis "\&#9166;")
;(setq org-ellipsis "Ã¢Â¤Â¶")
(setq org-ellipsis " â¤µ")
;(setq org-ellipsis "ÃƒÂ¢Ã‚Â¤Ã‚Âµ")

;(global-set-key (kbd "<f7>") 'org-agenda)
;(global-set-key (kbd "<f6>") 'org-capture)
(add-hook 'org-capture-mode-hook 'evil-insert-state)
(define-key global-map "\C-ca" 'org-agenda)
(define-key global-map "\C-cc" 'org-capture)

#+END_SRC
* Latex Stuff
#+BEGIN_SRC emacs-lisp
;For Tex
(require 'yasnippet)
(require 'tex)
(add-hook 'LaTeX-mode-hook (lambda ()
    (TeX-global-PDF-mode t)
    (auto-complete-mode t) 
    (flyspell-mode t)
    (flymake-mode t)
    (yas-global-mode 1)
    ))

(add-hook 'LaTeX-mode-hook (function turn-on-reftex))
(setq reftex-plug-into-AUCTeX t)

(load "auctex.el" nil t t)
(load "preview-latex.el" nil t t)
#+END_SRC
* Ledger Mode
    To keep track of money
#+BEGIN_SRC emacs-lisp
(require 'ledger-mode)

(add-hook 'ledger-mode-hook
    '(lambda ()
    (when (eq major-mode 'ledger-mode)
    (add-hook 'before-save-hook 'ledger-mode-clean-buffer)))
)
(add-hook 'ledger-mode-hook 'auto-complete-mode)
(add-hook 'ledger-mode-hook 'flymake-mode)
(add-hook 'ledger-mode-hook 'company-mode)

#+END_SRC
